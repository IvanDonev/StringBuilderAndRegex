
import java.util.Scanner;
import java.util.TreeSet;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

public class E12_StarEnigma {
    public static void main (String[] args){
        Scanner scanner = new Scanner(System.in);

        int n = Integer.parseInt(scanner.nextLine());
        String starRegex = "[star]";
        String infoRegex = "@(?<planetName>[A-Za-z]+)[^:@\\-!:>]*:(?<population>[\\d]+)[^:@\\-!:>]*!(?<attackType>[A || D])[^:@\\-!:>]*!->[^:@\\-!:>]*(?<soldierCount>[\\d]+)";

        Pattern starPattern = Pattern.compile(starRegex, Pattern.CASE_INSENSITIVE);
        Pattern decryptedInfo = Pattern.compile(infoRegex);

        TreeSet<String> attackedPlanets = new TreeSet<>();
        TreeSet<String> destroyedPlanets = new TreeSet<>();


        while (n-- > 0){
            StringBuilder cryptedCommand = new StringBuilder(scanner.nextLine());
            Matcher starMatch = starPattern.matcher(cryptedCommand);

            int decryptBy = 0;
            while(starMatch.find()){
                decryptBy++;
            }

            for (int i = 0; i < cryptedCommand.length(); i++) {
                char currentChar = cryptedCommand.charAt(i);
                currentChar -= decryptBy;
                cryptedCommand.setCharAt(i, currentChar);
            }

            Matcher decryptedInfoHarvest = decryptedInfo.matcher(cryptedCommand);

            while (decryptedInfoHarvest.find()){
                if (decryptedInfoHarvest.group("attackType").equals("A")){
                    attackedPlanets.add(decryptedInfoHarvest.group("planetName"));
                } else {
                    destroyedPlanets.add(decryptedInfoHarvest.group("planetName"));
                }

            }

        }


        System.out.println(String.format("Attacked planets: %d", attackedPlanets.size()));
        attackedPlanets.stream().forEach(e -> {
            System.out.println(String.format("-> %s", e));
        });

        System.out.println(String.format("Destroyed planets: %d", destroyedPlanets.size()));
        destroyedPlanets.stream().forEach(e -> {
            System.out.println(String.format("-> %s", e));
        });





    }
}
